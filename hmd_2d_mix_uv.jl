using  ApproxOperator

import ApproxOperator.Hamilton: ‚à´‚à´‚àáq‚àápdxdt, ‚à´‚à´‚àáv‚àáudxdt
import ApproxOperator.Heat: ‚à´vtdŒì, ‚à´vgdŒì, ‚à´vbdŒ©, L‚ÇÇ

using GLMakie

# ps = MKLPardisoSolver()
# set_matrixtype!(ps,2)

include("import_hmd.jl")

ndiv= 16
ndiv_p = 16

elements,nodes,nodes_p = import_hmd_mix("./msh/square/Tri6_"*string(ndiv)*".msh","./msh/square/square_"*string(ndiv_p)*".msh",ndiv_p)
n·µ§ = length(nodes)
n‚Çö = length(nodes_p)
n‚Çë = length(elements["Œ©"])

set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì‚ÇÅ"])
setùù≠!(elements["Œì‚ÇÇ"])
setùù≠!(elements["Œì‚ÇÉ"])
setùù≠!(elements["Œì‚ÇÑ"])
set‚àáùù≠!(elements["Œ©‚Çö"])
setùù≠!(elements["Œì‚ÇÅ‚Çö"])
setùù≠!(elements["Œì‚ÇÇ‚Çö"])
setùù≠!(elements["Œì‚ÇÉ‚Çö"])
setùù≠!(elements["Œì‚ÇÑ‚Çö"])

# set‚àáùù≠!(elements["Œ©·µç"])

œÅA = 1.0
EA = 1.0
Œ± = 1e15
ùëá(t) = t > 1.0 ? 0.0 : - sin(œÄ*t)
function ùë¢(x,t)
    if x < t - 1
        return 2/œÄ
    elseif x > t
        return 0.0
    else
        return (1-cos(œÄ*(t - x)))/œÄ
    end
end
prescribe!(elements["Œ©"],:EA=>(x,y,z)->EA)
prescribe!(elements["Œ©"],:œÅA=>(x,y,z)->œÅA)
prescribe!(elements["Œ©‚Çö"],:EA=>(x,y,z)->EA)
prescribe!(elements["Œ©‚Çö"],:œÅA=>(x,y,z)->œÅA)
prescribe!(elements["Œì‚ÇÅ"],:Œ±=>(x,y,z)->Œ±)
prescribe!(elements["Œì‚ÇÇ"],:Œ±=>(x,y,z)->Œ±)
prescribe!(elements["Œì‚ÇÉ"],:Œ±=>(x,y,z)->Œ±)
prescribe!(elements["Œì‚ÇÅ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÇ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÉ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÉ‚Çö"],:Œ±=>(x,y,z)->Œ±)
prescribe!(elements["Œì‚ÇÉ‚Çö"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÑ‚Çö"],:t=>(x,y,z)->-ùëá(y))
# prescribe!(elements["Œ©·µç"],:u=>(x,y,z)->ùë¢(x,y))

ùëé·µò = ‚à´‚à´‚àáq‚àápdxdt=>elements["Œ©"]
ùëé·µò·µñ = ‚à´‚à´‚àáv‚àáudxdt=>(elements["Œ©"],elements["Œ©‚Çö"])
ùëì·µñ = ‚à´vtdŒì=>elements["Œì‚ÇÑ‚Çö"]
ùëé·µÖ = ‚à´vgdŒì=>elements["Œì‚ÇÅ"]‚à™elements["Œì‚ÇÇ"]
ùëé·µù = ‚à´vgdŒì=>elements["Œì‚ÇÉ‚Çö"]

k·µ§·µ§ = zeros(n·µ§,n·µ§)
k·µÖ = zeros(n·µ§,n·µ§)
f·µÖ = zeros(n·µ§)
k·µ§‚Çö = zeros(n·µ§,n‚Çö)
f‚Çö = zeros(n‚Çö)
k·µù = zeros(n‚Çö,n‚Çö)
f·µù = zeros(n‚Çö)

ùëé·µò(k·µ§·µ§)
ùëé·µò·µñ(k·µ§‚Çö)
ùëì·µñ(f‚Çö)
ùëé·µÖ(k·µÖ,f·µÖ)
ùëé·µù(k·µù,f·µù)

dt = [k·µ§·µ§+k·µÖ -k·µ§‚Çö;-k·µ§‚Çö' k·µù]\[f·µÖ;-f‚Çö+f·µù]
# dt = [k·µ§·µ§-kÃÑ·µ§·µ§+k·µÖ -k·µ§‚Çö+kÃÑ·µ§‚Çö;-k·µ§‚Çö'+kÃÑ·µ§‚Çö' k·µù-kÃÑ‚Çö‚Çö]\[f·µÖ;-f‚Çö+f·µù]
d = dt[1:n·µ§]
Œ¥d = dt[n·µ§+1:end]

push!(nodes,:d=>d)
push!(nodes_p,:Œ¥d=>Œ¥d)

fig = Figure()
ax1 = Axis3(fig[1,1])
# ax2 = Axis3(fig[1,2])

xs = zeros(n·µ§)
ys = zeros(n·µ§)
ds = zeros(n·µ§)
for (i,node) in enumerate(nodes)
    xs[i] = node.x
    ys[i] = node.y
    ds[i] = node.d
end
xp = zeros(n‚Çö)
yp = zeros(n‚Çö)
Œ¥ds = zeros(n‚Çö)
for (i,node) in enumerate(nodes_p)
    xp[i] = node.x
    yp[i] = node.y
    Œ¥ds[i] = node.Œ¥d
end
face = zeros(n‚Çë,6)
for (i,elm) in enumerate(elements["Œ©"])
    face[i,:] .= [x.ùêº for x in elm.ùìí]
end

# mesh!(ax,xs,ys,face,color=zs)
# meshscatter!(ax,xs,ys,zs,color=zs,markersize = 0.1)
meshscatter!(ax1,xs,ys,ds,color=ds,markersize = 0.1)
# meshscatter!(ax2,xp,yp,Œ¥ds,color=Œ¥ds,markersize = 0.1)
fig

# save("./fig/616ÊµãËØï/64.png",fig)

    