using  ApproxOperator, JuMP, Ipopt, CairoMakie

model = Model(Ipopt.Optimizer)

include("import_Scordelis_Lo_roof.jl")

ndiv= 11
elements,nodes = import_roof_Tri3("./msh/bar_"*string(ndiv)*".msh")
n‚Çö = length(nodes)

setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì·µç"])
setùù≠!(elements["Œì·µó"])

k·∂ú = 100.0
m = 1.0
qÃá‚ÇÄ = 5.0
q‚ÇÄ = 1.0
œÅ = 1.0
A = 100.0
E = 3e6
œÅA = œÅ*A
EA = E*A
ùëá(t) = t > 1.0 ? 0 : - sin(œÄ*t)
prescribe!(elements["Œì·µç"],:ùëÉ=>(x,y,z)->100.0)
prescribe!(elements["Œì‚ÇÑ"],:ùëÉ=>(x,y,z)->ùëá(y))
# prescribe!(elements["Œ©"],:b=>(x,y,z)->0.0)

fig = Figure()
Axis(fig[1, 1])
ùë° = 0.0:0.01:1.0
ùúî = (k·∂ú/m)^0.5
ùë• = q‚ÇÄ.*cos.(ùúî.*ùë°) + qÃá‚ÇÄ/ùúî.*sin.(ùúî.*ùë°)
lines!(ùë°, ùë•, color = :black)

k = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)
k·µÖ = zeros(n‚Çö,n‚Çö)
f·µÖ = zeros(n‚Çö)
k·µù = zeros(n‚Çö,n‚Çö)
f·µù = zeros(n‚Çö)

ops = [
       
       Operator{:‚à´‚à´qÃámpqkpdx}(:œÅA=>œÅA,:EA=>EA),
       Operator{:‚à´ùëÉŒ¥udx}(),
       Operator{:‚à´vtdŒì}(),
       Operator{:‚à´vgdŒì}(:Œ±=>Œ±),
]



ops[1](elements["Œ©"],k)
ops[2](elements["Œì·µç"],f)
ops[3](elements["Œì‚ÇÑ"],f)
ops[4](elements["Œì‚ÇÅ"],k·µÖ,f·µÖ)
ops[4](elements["Œì‚ÇÇ"],k·µÖ,f·µÖ)
ops[4](elements["Œì‚ÇÉ"],k·µù,f·µù)

d = [k+k·µÖ k;k k·µù]\[f+f·µÖ;f+f·µù]

Œ¥d = d[n‚Çö+1:end]
d = d[1:n‚Çö]


lines!(nodes.x, d, color = :blue)
# lines!(t, d, color = :blue)


fig