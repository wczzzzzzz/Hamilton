using  ApproxOperator, JuMP, Ipopt, CairoMakie, XLSX

using GLMakie

model = Model(Ipopt.Optimizer)

include("import_hmd.jl")

ndiv= 10
elements,nodes = import_hmd_Tri3("./msh/square/square_"*string(ndiv)*".msh");uniform = "uniform"
n‚Çö = length(nodes)

setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì‚ÇÅ"])
setùù≠!(elements["Œì‚ÇÇ"])
setùù≠!(elements["Œì‚ÇÉ"])
setùù≠!(elements["Œì‚ÇÑ"])

Œ± = 1e9
œÅA = 1
EA = 1
ùëá(t) = t > 1.0 ? 0.0 : - sin(œÄ*t)
prescribe!(elements["Œì‚ÇÅ"],:ùëÉ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÅ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÇ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÉ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÑ"],:t=>(x,y,z)->ùëá(y))

k = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)
k·µÖ = zeros(n‚Çö,n‚Çö)
f·µÖ = zeros(n‚Çö)
k·µù = zeros(n‚Çö,n‚Çö)
f·µù = zeros(n‚Çö)

# ops = [
#        Operator{:‚à´‚à´qÃámpqkpdx}(:œÅA=>œÅA,:EA=>EA),
#        Operator{:‚à´ùëÉŒ¥udx}(),
#        Operator{:‚à´vtdŒì}(),
#        Operator{:‚à´vgdŒì}(:Œ±=>Œ±),
# ]



# ops[1](elements["Œ©"],k)
# ops[2](elements["Œì‚ÇÅ"],f)
# ops[3](elements["Œì‚ÇÑ"],f)
# ops[4](elements["Œì‚ÇÅ"],k·µÖ,f·µÖ)
# ops[4](elements["Œì‚ÇÇ"],k·µÖ,f·µÖ)
# ops[4](elements["Œì‚ÇÉ"],k·µù,f·µù)

# d = [k+k·µÖ k;k k·µù]\[f+f·µÖ;f+f·µù]
# d‚ÇÅ = d[1:n‚Çö]
# # Œ¥d = d[n‚Çö+1:end]
# d = d[1:n‚Çö]


Œ± = (EA/œÅA)^0.5
function ùë¢(x,t)
    if x < Œ±*(t-1)
        return 2*Œ±/œÄ
    elseif Œ±*t < x
        return 0
    else
        Œ±/œÄ*(1-cos(œÄ*(t-x/Œ±)))
    end
end

fig = Figure()
ax1 = Axis3(fig[1,1])
# ax2 = Axis3(fig[1,2])

xs = zeros(n‚Çö)
ys = zeros(n‚Çö)
ds = zeros(n‚Çö)
Œ¥ds = zeros(n‚Çö)
for (i,node) in enumerate(nodes)
    xs[i] = node.x
    ys[i] = node.y
    zs[i] = ùë¢(xs,ys)
    # zs[i] = node.d
    # Œ¥ds[i] = node.Œ¥d
end
face = zeros(n‚Çë,3)
for (i,elm) in enumerate(elements["Œ©"])
    face[i,:] .= [x.ùêº for x in elm.ùìí]
end

# mesh!(ax,xs,ys,zs,face,color=ds)
meshscatter!(ax1,xs,ys,zs,color=zs,markersize = 0.1)
# meshscatter!(ax1,xs,ys,ds,color=ds,markersize = 0.06)
# meshscatter!(ax2,xs,ys,Œ¥ds,color=Œ¥ds,markersize = 0.1)
fig


# ind = 101
# xs = 0.0:4.0/(ind-1):4.0
# ys = 0.0:4.0/(ind-1):4.0
# zs = zeros(ind,ind)
# for (i,x) in enumerate(xs)
#     for (j,y) in enumerate(ys)
#         zs[i,j] = ùë¢(x,y)
#          XLSX.openxlsx("./excel/exact_solution.xlsx", mode="rw") do xf
#          Sheet = xf[4]
#          ind = findfirst(n->n==ndiv,10)+(i-1)*101+j
#          Sheet["B"*string(ind)] = zs[i,j]
#         end
#     end
# end

# for i in 1:101
# x = xs[i]
# y = ys[i]
#      XLSX.openxlsx("./excel/exact_solution.xlsx", mode="rw") do xf
#     Sheet = xf[4]
#     ind = findfirst(n->n==ndiv,11)+i
#     Sheet["C"*string(ind)] = x
#     Sheet["D"*string(ind)] = y
# end
# end
