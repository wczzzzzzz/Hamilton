using  ApproxOperator, JuMP, Ipopt, CairoMakie, XLSX, LinearAlgebra

using GLMakie

# ps = MKLPardisoSolver()
# set_matrixtype!(ps,2)

model = Model(Ipopt.Optimizer)

include("import_hmd_test.jl")

ndiv= 10
elements,nodes = import_hmd_Tri3("./msh/Non-uniform_"*string(ndiv)*".msh")
# elements,nodes = import_hmd_Tri3("./msh/square_"*string(ndiv)*".msh")
# elements,nodes = import_hmd_Tri3("./msh/bar_"*string(ndiv)*".msh")
n‚Çö = length(nodes)

setùù≠!(elements["Œ©"])
set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì‚ÇÅ"])
setùù≠!(elements["Œì‚ÇÇ"])
setùù≠!(elements["Œì‚ÇÉ"])
setùù≠!(elements["Œì‚ÇÑ"])

Œ± = 1e9
œÅA = 1
EA = 1
ùëá(t) = t > 1.0 ? 0.0 : - sin(œÄ*t)
prescribe!(elements["Œì‚ÇÅ"],:ùëÉ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÅ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÇ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÉ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÑ"],:t=>(x,y,z)->ùëá(y))

k = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)
k·µÖ = zeros(n‚Çö,n‚Çö)
f·µÖ = zeros(n‚Çö)
k·µù = zeros(n‚Çö,n‚Çö)
f·µù = zeros(n‚Çö)

ops = [
       Operator{:‚à´‚à´qÃámpqkpdx}(:œÅA=>œÅA,:EA=>EA),
       Operator{:‚à´ùëÉŒ¥udx}(),
       Operator{:‚à´vtdŒì}(),
       Operator{:‚à´vgdŒì}(:Œ±=>Œ±),
       # Operator{:‚à´vgdŒì}(:Œ±=>1.0),
    #    Operator{:L‚ÇÇ}(),
]

ops[1](elements["Œ©"],k)
ops[2](elements["Œì‚ÇÅ"],f)
ops[3](elements["Œì‚ÇÑ"],f)
ops[4](elements["Œì‚ÇÅ"],k·µÖ,f·µÖ)
ops[4](elements["Œì‚ÇÇ"],k·µÖ,f·µÖ)
ops[4](elements["Œì‚ÇÉ"],k·µù,f·µù)

d = [k+k·µÖ k;k k·µù]\[f+f·µÖ;f+f·µù]
d‚ÇÅ = d[1:n‚Çö]

push!(nodes,:d=>d‚ÇÅ)


Œ± = (EA/œÅA)^0.5
function ùë¢(x,t)
    if x < Œ±*(t-1)
        return 2*Œ±/œÄ
    elseif Œ±*t < x
        return 0.0
    else
        Œ±/œÄ*(1-cos(œÄ*(t-x/Œ±)))
    end
end

# setùù≠!(elements["Œ©·µç"])
# set‚àáùù≠!(elements["Œ©·µç"])
# prescribe!(elements["Œ©·µç"],:u=>(x,y,z)->ùë¢(x,y))
# L‚ÇÇ = ops[5](elements["Œ©·µç"])

for i in 1:n‚Çö
    x = nodes.x[i]
    y = nodes.y[i]
    d‚ÇÅ = d[i]
    Œî = d[i] - ùë¢(x,y)
        index = [10,20,40,80]
        XLSX.openxlsx("./excel/Non-uniform.xlsx", mode="rw") do xf
        Sheet = xf[4]
        ind = findfirst(n->n==ndiv,index)+i
        Sheet["A"*string(ind)] = x
        Sheet["B"*string(ind)] = y
        Sheet["C"*string(ind)] = d‚ÇÅ
        Sheet["D"*string(ind)] = Œî
        # Sheet["E"*string(ind)] = log10(L‚ÇÇ)
        # Sheet["F"*string(ind)] = log10(4/ndiv)
    end
end

# push!(nodes,:d=>d‚ÇÅ)
# for (i,a) in enumerate(elements["Œ©"])
#     node1 = a.ùìí[1]
#     node2 = a.ùìí[2]
#     node3 = a.ùìí[3]
#     x1 = node1.x
#     x2 = node2.x
#     x3 = node3.x
#     y1 = node1.y
#     y2 = node2.y
#     y3 = node3.y
#     d1 = node1.d
#     d2 = node2.d
#     d3 = node3.d
#     Œî1 = d1 - ùë¢(x1,y1)
#     Œî2 = d2 - ùë¢(x2,y2)
#     Œî3 = d3 - ùë¢(x3,y3)
#     XLSX.openxlsx("./excel/hmd_2d_n=10.xlsx", mode="rw") do xf
#         Sheet = xf[1]
#         ind = findfirst(n->n==ndiv,11)+6*(i-1)
#         Sheet["A"*string(ind+1)] = x1
#         Sheet["B"*string(ind+1)] = y1
#         Sheet["C"*string(ind+1)] = d1
#         Sheet["D"*string(ind+1)] = Œî1

#         Sheet["A"*string(ind+2)] = x2
#         Sheet["B"*string(ind+2)] = y2
#         Sheet["C"*string(ind+2)] = d2
#         Sheet["D"*string(ind+2)] = Œî2

#         Sheet["A"*string(ind+3)] = x3
#         Sheet["B"*string(ind+3)] = y3
#         Sheet["C"*string(ind+3)] = d3
#         Sheet["D"*string(ind+3)] = Œî3

#         Sheet["A"*string(ind+4)] = 0.5*(x1+x2)
#         Sheet["B"*string(ind+4)] = 0.5*(y1+y2)
#         Sheet["C"*string(ind+4)] = 0.5*(d1+d2)
#         Sheet["D"*string(ind+4)] = 0.5*(Œî1+Œî2)

#         Sheet["A"*string(ind+5)] = 0.5*(x2+x3)
#         Sheet["B"*string(ind+5)] = 0.5*(y2+y3)
#         Sheet["C"*string(ind+5)] = 0.5*(d2+d3)
#         Sheet["D"*string(ind+5)] = 0.5*(Œî2+Œî3)

#         Sheet["A"*string(ind+6)] = 0.5*(x3+x1)
#         Sheet["B"*string(ind+6)] = 0.5*(y3+y1)
#         Sheet["C"*string(ind+6)] = 0.5*(d3+d1)
#         Sheet["D"*string(ind+6)] = 0.5*(Œî3+Œî1)
#     end
# end

# push!(nodes,:d=>d)
# fig = Figure()
# Axis(fig[1, 1])
# xs = [node.x for node in nodes[[36,45,54,63,72,81,90,99,108,117,18]]]
# ys = [node.d for node in nodes[[36,45,54,63,72,81,90,99,108,117,18]]]
# lines!(xs,ys, color = :blue)

# fig

# ind = 101
# xs = 0.0:4.0/(ind-1):4.0
# ys = 0.0:4.0/(ind-1):4.0
# zs = zeros(ind,ind)
# for (i,x) in enumerate(xs)
#     for (j,y) in enumerate(ys)
#         zs[i,j] = ùë¢(x,y)
#     end
# end

fig = Figure()
ax = Axis3(fig[1,1])
# fig

xs = 0.0:0.4:4.0
ys = 0.0:0.4:4.0
zs = hcat([d[1],d[40:-1:32]...,d[4]],
          [d[5],d[41:49]...,d[31]],
          [d[6],d[50:58]...,d[30]],
          [d[7],d[59:67]...,d[29]],
          [d[8],d[68:76]...,d[28]],
          [d[9],d[77:85]...,d[27]],
          [d[10],d[86:94]...,d[26]],
          [d[11],d[95:103]...,d[25]],
          [d[12],d[104:112]...,d[24]],
          [d[13],d[113:121]...,d[23]],
          [d[2],d[14:22]...,d[3]])
# xs = zeros(n‚Çö)
# ys = zeros(n‚Çö)
# zs = zeros(n‚Çö)
# for (i,node) in enumerate(nodes)
#     xs[i] = node.x
#     ys[i] = node.y
#     zs[i] = node.d
# end

surface!(ax,xs,ys,zs')
fig


    