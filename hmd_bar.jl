using  ApproxOperator

import ApproxOperator.Hamilton: ‚à´‚à´‚àáq‚àápdxdt
import ApproxOperator.Heat: ‚à´vtdŒì, ‚à´vgdŒì, ‚à´vbdŒ©, L‚ÇÇ, ‚à´‚à´‚àáv‚àáudxdy

using GLMakie
using SparseArrays

# ps = MKLPardisoSolver()
# set_matrixtype!(ps,2)

include("import_hmd.jl")

ndiv= 20
elements,nodes = import_hmd_Tri6("./msh/square/"*string(ndiv)*".msh")
# elements,nodes = import_hmd_Tri6("./msh/tri6_x=20/"*string(ndiv)*".msh")
n‚Çö = length(nodes)
n‚Çë = length(elements["Œ©"])

set‚àáùù≠!(elements["Œ©"])
setùù≠!(elements["Œì‚ÇÅ"])
setùù≠!(elements["Œì‚ÇÇ"])
setùù≠!(elements["Œì‚ÇÉ"])
setùù≠!(elements["Œì‚ÇÑ"])
set‚àáùù≠!(elements["Œ©·µç"])

œÅA = 1.0
EA = 1.0
Œ± = 1e15
L = 1.0
v‚ÇÄ = 1.0

prescribe!(elements["Œ©"],:EA=>(x,y,z)->EA)
prescribe!(elements["Œ©"],:œÅA=>(x,y,z)->œÅA)
prescribe!(elements["Œì‚ÇÅ"],:Œ±=>(x,y,z)->Œ±)
prescribe!(elements["Œì‚ÇÉ"],:Œ±=>(x,y,z)->Œ±)
prescribe!(elements["Œì‚ÇÑ"],:Œ±=>(x,y,z)->Œ±)
prescribe!(elements["Œì‚ÇÅ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÉ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÑ"],:g=>(x,y,z)->0.0)
# prescribe!(elements["Œì‚ÇÉ"],:g=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÉ"],:ùëÉ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÑ"],:ùëÉ=>(x,y,z)->0.0)
prescribe!(elements["Œì‚ÇÅ"],:t=>(x,y,z)->1.0)

ùëé = ‚à´‚à´‚àáq‚àápdxdt=>elements["Œ©"]
ùëì = ‚à´vtdŒì=>elements["Œì‚ÇÅ"]

ùëé·µÖ = ‚à´vgdŒì=>elements["Œì‚ÇÅ"]‚à™elements["Œì‚ÇÑ"]
ùëé·µù = ‚à´vgdŒì=>elements["Œì‚ÇÉ"]‚à™elements["Œì‚ÇÑ"]

k = zeros(n‚Çö,n‚Çö)
f = zeros(n‚Çö)
k·µÖ = zeros(n‚Çö,n‚Çö)
f·µÖ = zeros(n‚Çö)
k·µù = zeros(n‚Çö,n‚Çö)
f·µù = zeros(n‚Çö)

ùëé(k)
ùëì(f)
ùëé·µÖ(k·µÖ,f·µÖ)
ùëé·µù(k·µù,f·µù)

dt = [k+k·µÖ -k;-k k·µù]\[f·µÖ;-f+f·µù]
d = dt[1:n‚Çö]
push!(nodes,:d=>d)

u = d
v = dt[n‚Çö+1:end]

function compute_stress(u, EA, dx)
    n = length(u)
    stress = zeros(n‚Çö)
    for i in 2:n
        œµ = (u[i] - u[i - 1]) / dx
        stress[i] = EA * œµ
    end
    stress[1] = stress[2]
    return stress
end

xs = [node.x for node in nodes]

t = 0.5
stress = compute_stress(u, EA, dx)

fig = Figure()
ax = Axis(fig[1, 1], xlabel = "x", ylabel = "Stress")
lines!(ax, xs, stress, color = :blue, linewidth = 2)
fig

# xs = [node.x for node in nodes]
# ys = [node.y for node in nodes]
# ds = [node.d for node in nodes]
# fig = Figure()
# ax = Axis(fig[1, 1], xlabel = "x", ylabel = "t")
# scatter!(ax, ys, ds, color = d, markersize = 10)
# fig

# save("./fig/Á¢∞Êíû/‰ΩçÁßªÂõæ/Tri6ÂùáÂ∏É/t=20.png",fig)


    




# fig = Figure()
# ax1 = Axis3(fig[1,1])

# xs = zeros(n‚Çö)
# ys = zeros(n‚Çö)
# zs = zeros(n‚Çö)
# ds = zeros(n‚Çö)
# Œ¥ds = zeros(n‚Çö)
# for (i,node) in enumerate(nodes)
#     xs[i] = node.x
#     ys[i] = node.y
#     ds[i] = node.d
# end
# face = zeros(n‚Çë,6)
# for (i,elm) in enumerate(elements["Œ©"])
#     face[i,:] .= [x.ùêº for x in elm.ùìí]
# end

# meshscatter!(ax1,xs,ys,ds,color=ds,markersize = 0.06)
# fig