
using Revise, ApproxOperator, Printf, SparseArrays, LinearAlgebra, CairoMakie

include("import_hmd_test.jl")

ndiv= 4
elements,nodes = import_hmd_bar("./msh/bar_"*string(ndiv)*".msh")
nโ = length(nodes)

set๐ญ!(elements["ฮฉ"])
setโ๐ญ!(elements["ฮฉ"])
set๐ญ!(elements["ฮแต"])
set๐ญ!(elements["ฮแต"])

ฮฑ = 1e9
ฯA = 1
EA = 1
prescribe!(elements["ฮแต"],:g=>(x,y,z)->0.0)

fig = Figure()
Axis(fig[1, 1])

ops = [
    Operator{:โซqmpdฮฉ}(:ฯA=>ฯA),
    Operator{:โซqkpdฮฉ}(:EA=>EA),
    Operator{:โซvtdฮ}(),
    Operator{:โซvgdฮ}(:ฮฑ=>ฮฑ),
]

k = zeros(nโ,nโ)
m = zeros(nโ,nโ)
fแต = zeros(nโ)
fแต = zeros(nโ)

ops[1](elements["ฮฉ"],m)
ops[2](elements["ฮฉ"],k)
ops[4](elements["ฮแต"],m,fแต)

T = 4
ฮt = 0.1
nโ = Int(T/ฮt)
d = zeros(nโ,nโ+1)
dฬโ = zeros(nโ)
dฬโ = zeros(nโ)

๐(t) = t > 1.0 ? 0.0 : - sin(ฯ*t)


for n in 1:nโ
    fill!(fแต,0.0)
    t = n*ฮt
    prescribe!(elements["ฮแต"],:t=>(x,y,z)->๐(t))
    ops[3](elements["ฮแต"],fแต)
    # println(norm(fแต))
     dฬโ .= m\(fแต+fแต - k*d[:,n])
     d[:,n+1] .= d[:,n] + ฮt*dฬโ
     dฬโ .+= ฮt*dฬโ


    # for i in (1:nโ)
    # global dโโโ .+= m/k *d[:, i] 
    # global dโโโโ .+= dโโ + ฮt*dโโโ
    # global dโโโ .+= dโ + ฮt*dโโ
end

lines!(nodes.x[[1,3:end...,2]], d[:,21], color = :blue)

fig