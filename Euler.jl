
using Revise, ApproxOperator, Printf, SparseArrays

include("import_hmd_test.jl")

ndiv= 4
elements,nodes = import_hmd_bar("./msh/bar_"*string(ndiv)*".msh")
nโ = length(nodes)
nโ = length(nodes)

set๐ญ!(elements["ฮฉ"])
set๐ญ!(elements["ฮแต"])
set๐ญ!(elements["ฮแต"])

ฯA = 1
EA = 1
prescribe!(elements["ฮแต"],:g=>(x,y,z)->0.0)
prescribe!(elements["ฮแต"],:g=>(x,y,z)->0.0)

ops = [
    Operator{:โซqmpdฮฉ}(:ฯA=>ฯA),
    Operator{:โซqkpdฮฉ}(:EA=>EA),
]

k = zeros(nโ,nโ)
m = zeros(nโ,nโ)

ops[1](elements["ฮฉ"],m)
ops[2](elements["ฮฉ"],k)

ฮt = 5
d = zeros(nโ,nโ+1)
dฬโ = zeros(nโ)
dฬโ = zeros(nโ)
dฬโโโ = zeros(nโ)

for n in 1:nโ
    global dฬโ .+= k/m *d[:,n] 
    global dฬโโโ .+= dฬโ + ฮt*dฬโ
    global d[:,n+1] .= d[:,n] + ฮt*dฬโ

    # for i in (1:nโ)
    # global dโโโ .+= m/k *d[:, i] 
    # global dโโโโ .+= dโโ + ฮt*dโโโ
    # global dโโโ .+= dโ + ฮt*dโโ
end
